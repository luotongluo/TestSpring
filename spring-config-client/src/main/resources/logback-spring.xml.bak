<!--
<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <property resource="application.properties"/>

    <springProfile name="test,dev">
        <springProperty scope="context" name="logback.logdir" source="logback.loghome"/>
        <springProperty scope="context" name="logback.appname" source="spring.application.name"/>
        <contextName>${logback.appname}</contextName>
    </springProfile>
    <springProfile name="prod">
        &lt;!&ndash;在项目的根目录下面创建文件&ndash;&gt;
        <property name="logback.logdir" value="/home/log/"/>
        &lt;!&ndash;在磁盘的根目录下面创建日志文件&ndash;&gt;
        &lt;!&ndash;<property name="logback.logdir" value="/log/"/>&ndash;&gt;
        <property name="logback.appname" value="test-config-client"/>
    </springProfile>

    &lt;!&ndash;输出到控制台 ConsoleAppender&ndash;&gt;
    <appender name="consoleLog1" class="ch.qos.logback.core.ConsoleAppender">
        &lt;!&ndash;展示格式 layout&ndash;&gt;
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>%d -1 %msg%n</pattern>
        </layout>
    </appender>
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%d{HH:mm:ss.SSS} %contextName [%thread] %-5level %logger{36} - %msg%n</pattern>
        </encoder>
    </appender>

    <appender name="fileInfoLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        &lt;!&ndash;如果只是想要 Info 级别的日志，只是过滤 info 还是会输出 Error 日志，因为 Error 的级别高，
        所以我们使用下面的策略，可以避免输出 Error 的日志&ndash;&gt;
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            &lt;!&ndash;过滤 Error&ndash;&gt;
            <level>ERROR</level>
            &lt;!&ndash;匹配到就禁止&ndash;&gt;
            <onMatch>DENY</onMatch>
            &lt;!&ndash;没有匹配到就允许&ndash;&gt;
            <onMismatch>ACCEPT</onMismatch>
        </filter>
        &lt;!&ndash;日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则
        如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天
        的日志改名为今天的日期。即，<File> 的日志都是当天的。
       &ndash;&gt;
        <File>${logback.logdir}/info.${logback.appname}.log</File>
        &lt;!&ndash;滚动策略，按照时间滚动 TimeBasedRollingPolicy&ndash;&gt;
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            &lt;!&ndash;文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间&ndash;&gt;
            <FileNamePattern>${logback.logdir}/info.${logback.appname}.%d{yyyy-MM-dd}.log</FileNamePattern>
            &lt;!&ndash;只保留最近90天的日志&ndash;&gt;
            <maxHistory>90</maxHistory>
            &lt;!&ndash;用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志&ndash;&gt;
            <totalSizeCap>1GB</totalSizeCap>
        </rollingPolicy>
        &lt;!&ndash;日志输出编码格式化&ndash;&gt;
        <encoder>
            <charset>UTF-8</charset>
            <pattern>%d [%thread] %-5level %logger{36} %line - %msg%n</pattern>
        </encoder>
    </appender>

    <appender name="fileErrorLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        &lt;!&ndash;如果只是想要 Error 级别的日志，那么需要过滤一下，默认是 info 级别的，ThresholdFilter&ndash;&gt;
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>Error</level>
        </filter>
        &lt;!&ndash;日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则
        如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天
        的日志改名为今天的日期。即，<File> 的日志都是当天的。
       &ndash;&gt;
        <File>${logback.logdir}/error.${logback.appname}.log</File>
        &lt;!&ndash;滚动策略，按照时间滚动 TimeBasedRollingPolicy&ndash;&gt;
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            &lt;!&ndash;文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间&ndash;&gt;
            <FileNamePattern>${logback.logdir}/error.${logback.appname}.%d{yyyy-MM-dd}.log</FileNamePattern>
            &lt;!&ndash;<fileNamePattern>${log.path}.%d{yyyy-MM-dd}.zip</fileNamePattern>&ndash;&gt;
            &lt;!&ndash;只保留最近90天的日志&ndash;&gt;
            <maxHistory>90</maxHistory>
            &lt;!&ndash;用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志&ndash;&gt;
            <totalSizeCap>1GB</totalSizeCap>
        </rollingPolicy>
        &lt;!&ndash;日志输出编码格式化&ndash;&gt;
        <encoder>
            <charset>UTF-8</charset>
            <pattern>%d [%thread] %-5level %logger{36} %line - %msg%n</pattern>
        </encoder>
    </appender>
    &lt;!&ndash;指定最基础的日志输出级别&ndash;&gt;
    &lt;!&ndash;<root level="INFO">
        &lt;!&ndash;appender将会添加到这个loger&ndash;&gt;
        <appender-ref ref="consoleLog1"/>
        <appender-ref ref="consoleLog2"/>
    </root>&ndash;&gt;
    &lt;!&ndash; 测试环境+开发环境. 多个使用逗号隔开. &ndash;&gt;
    <springProfile name="test,dev">
        <root level="info">
            <appender-ref ref="console"/>
            <appender-ref ref="fileInfoLog"/>
        </root>
    </springProfile>
    &lt;!&ndash; 生产环境. &ndash;&gt;
    <springProfile name="prod">
        <root level="info">
            <appender-ref ref="console"/>
            <appender-ref ref="fileInfoLog"/>
        </root>
    </springProfile>

</configuration>

-->
